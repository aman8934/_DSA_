/*
class Node {
    int data;
    Node left;
    Node right;

    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}  */
class Pair{
    Node temp;
    int dis;
   
    public Pair(int dis, Node temp){
        this.dis=dis;
        this.temp=temp;
    }
}
class Solution {
    public static int minTime(Node root, int target) {
        // code here
    ArrayList<Integer> arr =new ArrayList<>();
    HashSet<Node> vis =new HashSet<>();
    HashMap<Node,Node> map =new HashMap<>();
    Queue<Pair> q =new LinkedList<>();
    Node node=trget(root,target);
    if(node==null) return 0;
    mp(root,null,map);
    q.add(new Pair(0,node));
    int dis=0;
     while(!q.isEmpty()){
            Pair p=q.poll();
            dis=p.dis;
            Node curr=p.temp;
            Node prev=map.get(curr);
            vis.add(curr);
            
            if(curr.left!=null && !vis.contains(curr.left )){ q.add(new Pair(1+dis,curr.left)); }
            if(curr.right!=null && !vis.contains(curr.right)) q.add(new Pair(1+dis,curr.right));
            if(prev!=null  && !vis.contains(prev)) q.add(new Pair(1+dis,prev));
        }
        return dis;
    }
    public static Node trget(Node root, int target) {
    if (root == null) {
        return null;
    }

    if (root.data == target) {
        return root;
    }

    Node left = trget(root.left, target);
    if (left != null) {
        return left;
    }

    return trget(root.right, target);
}
    public static void mp(Node root,Node prev,HashMap<Node,Node> map) {
        if(root==null) return ;
        
        map.put(root,prev);
        mp(root.left,root,map);
        mp(root.right,root,map);
        return;
    }
}
